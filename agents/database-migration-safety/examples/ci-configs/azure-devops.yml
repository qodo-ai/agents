trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - migrations/**
      - db/migrate/**
      - src/migrations/**
      - "**/*.sql"

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - migrations/**
      - db/migrate/**
      - src/migrations/**
      - "**/*.sql"

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  displayName: 'Test Stage'
  jobs:
  - job: MigrationSafetyCheck
    displayName: 'Database Migration Safety Check'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
      
      - script: |
          npm install -g @qodo/command@0.27.0
        displayName: 'Install Qodo Command'
      
    - script: |
        echo "üîç Analyzing database migrations for safety..."
        qodo database_migration_safety \
          --migration_directory=./migrations \
          --risk_threshold=caution \
          --include_rollback_check=true \
          --check_backup_requirements=true \
          --suggest_alternatives=true \
          --output_file=migration-safety-results.json
      displayName: 'Check Migration Safety'
      
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'migration-safety-results.json'
        testRunTitle: 'Migration Safety Analysis'
      displayName: 'Publish Test Results'
      
    - script: |
        if [ -f migration-safety-results.json ]; then
          echo "üìä Migration Safety Results:"
          cat migration-safety-results.json | jq '.'
          
          SAFE_TO_DEPLOY=$(cat migration-safety-results.json | jq -r '.safe_to_deploy')
          RISK_LEVEL=$(cat migration-safety-results.json | jq -r '.risk_level')
          
          if [ "$SAFE_TO_DEPLOY" = "false" ]; then
            echo "‚ùå Migrations are not safe to deploy!"
            echo "Risk Level: $RISK_LEVEL"
            echo "Please review the migration safety analysis and address any issues."
            exit 1
          else
            echo "‚úÖ Migrations are safe to deploy"
            echo "Risk Level: $RISK_LEVEL"
          fi
        else
          echo "‚ö†Ô∏è No migration safety results found"
          exit 1
        fi
      displayName: 'Validate Migration Safety'
      
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'migration-safety-results.json'
        artifactName: 'migration-safety-results'
      displayName: 'Publish Migration Safety Results'

- stage: Security
  displayName: 'Security Stage'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: MigrationSecurityReview
    displayName: 'Migration Security Review'
    steps:
    - download: current
      artifact: migration-safety-results
      
    - script: |
        if [ -f migration-safety-results/migration-safety-results.json ]; then
          RISK_LEVEL=$(cat migration-safety-results/migration-safety-results.json | jq -r '.risk_level')
          
          if [ "$RISK_LEVEL" = "CRITICAL" ] || [ "$RISK_LEVEL" = "DANGEROUS" ]; then
            echo "‚ö†Ô∏è High-risk migration detected: $RISK_LEVEL"
            echo "Manual approval required before deployment"
            echo "Please review the migration safety analysis"
          else
            echo "‚úÖ Migration risk level acceptable: $RISK_LEVEL"
          fi
        fi
      displayName: 'Security Review'
      
    - task: ManualValidation@0
      inputs:
        instructions: 'Please review the migration safety analysis and approve if safe to deploy'
        notifyUsers: '$(Build.RequestedFor)'
      displayName: 'Manual Approval for High-Risk Migrations'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
