# Clean Code Description Agent Configuration
version = "1.0"

[commands.clean_code_description]
description = "Analyze code for clean, consistent, and accurate descriptions in docstrings, comments, and naming conventions"

instructions = """
You are an expert in code documentation and clean code practices. Your task is to:

1. Analyze code changes using Qodo Merge to identify documentation issues
2. Focus on:
   - Missing or incomplete docstrings
   - Outdated or incorrect docstrings/comments
   - Redundant or low-value comments
   - Inconsistent documentation styles
   - Poorly named functions, classes, or variables
3. Categorize findings by severity: Critical, High, Medium, Low
4. Provide clear, actionable feedback for each issue
5. Suggest improvements with concrete examples
6. Ensure that the documentation aligns with the actual behavior of the code

Return feedback that helps developers maintain a clean, readable, and maintainable codebase.
"""

arguments = [
    { name = "target_branch", type = "string", required = false, default = "main", description = "Branch to compare changes against" },
    { name = "severity_threshold", type = "string", required = false, default = "medium", description = "Minimum severity level to report (low, medium, high, critical)" },
    { name = "include_suggestions", type = "boolean", required = false, default = true, description = "Include improvement suggestions" },
    { name = "focus_areas", type = "string", required = false, description = "Comma-separated focus areas (docstrings, comments, naming)" },
    { name = "exclude_files", type = "string", required = false, description = "Comma-separated list of file patterns to exclude from analysis" }
]

tools = ["qodo_merge", "git", "filesystem"]
execution_strategy = "act"

output_schema = """
{
  "type": "object",
  "properties": {
    "summary": {
      "type": "object",
      "description": "High-level summary of documentation and naming quality issues found",
      "properties": {
        "total_issues": {"type": "number", "description": "Total number of issues identified"},
        "critical_issues": {"type": "number", "description": "Number of issues categorized as critical"},
        "high_issues": {"type": "number", "description": "Number of high severity issues"},
        "medium_issues": {"type": "number", "description": "Number of medium severity issues"},
        "low_issues": {"type": "number", "description": "Number of low severity issues"},
        "missing_docstrings": {"type": "number", "description": "Number of functions/classes missing docstrings"},
        "outdated_descriptions": {"type": "number", "description": "Number of outdated or incorrect docstrings/comments"},
        "redundant_comments": {"type": "number", "description": "Number of unnecessary or low-value comments"},
        "poor_names": {"type": "number", "description": "Number of functions, classes, or variables with unclear or inconsistent names"},
        "files_reviewed": {"type": "number", "description": "Total number of files analyzed"},
        "overall_score": {"type": "number", "minimum": 0, "maximum": 10, "description": "Overall documentation quality score (0-10)"}
      },
      "required": [
        "total_issues",
        "critical_issues",
        "high_issues",
        "medium_issues",
        "low_issues",
        "missing_docstrings",
        "outdated_descriptions",
        "redundant_comments",
        "poor_names",
        "files_reviewed",
        "overall_score"
      ]
    },
    "issues": {
      "type": "array",
      "description": "Detailed list of individual issues identified in the codebase",
      "items": {
        "type": "object",
        "properties": {
          "file": {"type": "string", "description": "Path to the file containing the issue"},
          "line": {"type": "number", "description": "Line number where the issue occurs"},
          "severity": {"type": "string", "enum": ["critical", "high", "medium", "low"], "description": "Severity level of the issue"},
          "category": {"type": "string", "description": "Category of the issue (e.g., docstring, comment, naming)"},
          "title": {"type": "string", "description": "Short title summarizing the issue"},
          "description": {"type": "string", "description": "Detailed explanation of the problem"},
          "suggestion": {"type": "string", "description": "Suggested fix or improvement"},
          "code_example": {"type": "string", "description": "Example of improved or corrected code"}
        },
        "required": ["file", "severity", "category", "title", "description"]
      }
    },
    "suggestions": {
      "type": "array",
      "description": "List of broader improvement suggestions for code cleanliness and documentation",
      "items": {
        "type": "object",
        "properties": {
          "file": {"type": "string", "description": "File path for the suggestion"},
          "type": {"type": "string", "description": "Type of suggestion (e.g., naming, docstring, structure)"},
          "description": {"type": "string", "description": "Description of the suggested improvement"},
          "implementation": {"type": "string", "description": "Recommended way to apply the suggestion"}
        },
        "required": ["file", "type", "description"]
      }
    },
    "approved": {"type": "boolean", "description": "Indicates if code meets cleanliness standards"},
    "requires_changes": {"type": "boolean", "description": "Indicates if changes are required before approval"}
  },
  "required": ["summary", "issues", "approved", "requires_changes"]
}
"""

exit_expression = "approved"
